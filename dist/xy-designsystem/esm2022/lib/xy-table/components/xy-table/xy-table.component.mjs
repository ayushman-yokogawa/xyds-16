import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, HostListener, Input, ViewChild } from '@angular/core';
import { MatSort } from '@angular/material/sort';
import { MatLegacyTable as MatTable, MatLegacyTableDataSource as MatTableDataSource } from '@angular/material/legacy-table';
import { Output, EventEmitter } from '@angular/core';
import { SelectionModel } from '@angular/cdk/collections';
import { MatLegacyPaginator as MatPaginator } from '@angular/material/legacy-paginator';
import { filter } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/material/table";
import * as i3 from "@angular/material/button";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/menu";
import * as i6 from "@angular/material/paginator";
import * as i7 from "@angular/material/checkbox";
import * as i8 from "@angular/forms";
import * as i9 from "@angular/material/sort";
import * as i10 from "../../../xy-input/xy-input.component";
import * as i11 from "../../../xy-button/xy-button.component";
import * as i12 from "../xy-table-cell/xy-table-cell.component";
export const tableConst = {
    actionButton: {
        edit: 'edit',
        delete: 'delete',
        view: 'View',
    },
};
export class XyTableComponent {
    onEditClick() {
        this.buttonAction.emit({
            name: tableConst.actionButton.edit,
            value: this.value,
        });
    }
    onDeleteClick() {
        this.buttonAction.emit({
            name: tableConst.actionButton.delete,
            value: this.value,
        });
    }
    onViewClick() {
        this.buttonAction.emit({
            name: tableConst.actionButton.view,
            value: this.value,
        });
    }
    constructor() {
        this.xyTableData = [];
        this.deleteRow = new EventEmitter();
        this.expandDetail = new EventEmitter();
        this.expandRequired = true;
        this.expandTableDetail = [];
        this.selection = new SelectionModel(true, []);
        this.expandAsData = false;
        this.expandAsTableData = false;
        this.isEditRequired = false;
        this.isDeleteRequired = false;
        this.editRow = new EventEmitter();
        this.refreshTrig = new EventEmitter();
        this.action = new EventEmitter();
        this.columnsToDisplay = [];
        this.expandColumnsToDisplay = [];
        this.valid = false;
        this.buttonAction = new EventEmitter();
        this.emptyData = new MatTableDataSource([{ empty: "row" }]);
        this.dataSourceFilters = new MatTableDataSource(this.xyTableData);
        this.getFilterData = [];
        this.empFilters = [];
        this.defaultValue = "All";
        this.filterDictionary = new Map();
    }
    onHostClick(event) {
        console.log(event);
    }
    refreshClick(event) {
        console.log("event", event);
    }
    // getDisplayedColumns(): string[] {
    //   return this.columnDefs.filter(cd => cd.visible).map(cd => cd.columnDef);
    // } 
    getDisplayedExpandColumns() {
        return this.expandcolumnDefs.filter(cd => cd.visible).map(cd => cd.columnDef);
    }
    getDisplayedColumns() {
        const filterData = this.columnDefs.filter(cd => cd.visible).map(cd => cd.columnDef);
        const columnHide = this.xyTableData.map((rowValue) => {
            let obj = {};
            for (const [key, value] of Object.entries(rowValue)) {
                if (filterData.indexOf(key) > -1) {
                    obj[key] = value;
                }
            }
            return obj;
        });
        console.log(columnHide);
        this.dataSource = new MatTableDataSource(columnHide);
        return this.columnDefs.filter(cd => cd.visible).map(cd => cd.columnDef);
    }
    ngOnInit() {
        this.intlies = this.customfilter;
        this.intlies2 = this.CustomELement;
        this.dataSource = new MatTableDataSource(this.xyTableData);
        this.dataSource.sort = this.sort;
        this.columnDefs.forEach(element => this.columnsToDisplay.push(element.columnDef));
        this.paginator._intl.itemsPerPageLabel = this.DisplayPaginatorLabel;
        this.expandcolumnDefs.forEach(element => this.expandColumnsToDisplay.push(element.columnDef));
    }
    applyFilter(event) {
        const filterValue = event.target.value;
        this.dataSource.filter = filterValue.trim().toLowerCase();
    }
    ngAfterViewInit() {
        this.dataSource.paginator = this.paginator;
        this.searchMenu.closed = this.configureMenuClose(this.searchMenu.close);
    }
    toggleRow(element) {
        this.expandedElement = this.expandedElement === element ? null : element;
    }
    onTableAction(e) {
        this.action.emit(e);
        this.buttonAction.emit({ name: tableConst.actionButton.delete });
    }
    delete(data) {
        this.deleteRow.emit(data);
    }
    edit(data) {
        this.editRow.emit(data);
    }
    click() {
        if (this.matButton) {
            this.matButton._elementRef.nativeElement.click();
        }
    }
    onClick($event) {
        console.log("Button CLicked");
    }
    refresh($event) { }
    onClickRight($event, element) {
        $event.stopPropagation();
        if (element.clickRight) {
            element.clickRight.call(this);
        }
    }
    // onDeleteClick() {
    // onViewClick() {
    //   this.buttonAction.emit({ name: tableConst.actionButton.view });
    // }
    ngOnChanges(changes) {
        // this.getDisplayedColumns();
        for (const propName of Object.keys(changes)) {
            const change = changes[propName];
            if (propName === 'expandTableDetail') {
                this.expandedElement = change.currentValue;
                this.expandedDataSource = this.expandedElement;
            }
        }
    }
    selectedRow(element) {
        this.changeColor = this.expandedElement === element ? null : element;
    }
    /** Whether the number of selected elements matches the total number of rows. */
    isAllSelected() {
        const numSelected = this.selection.selected.length;
        const numRows = this.dataSource.data.length;
        return numSelected === numRows;
    }
    selectRow(data) {
        this.selection.toggle(data);
    }
    masterToggle() {
        this.isAllSelected() ?
            this.selection.clear() :
            this.dataSource.data.forEach((data) => this.selection.select(data));
    }
    removeSelectedRows() {
        this.selection.selected.forEach(item => {
            let index = this.xyTableData.findIndex((d) => d === item);
            console.log(this.xyTableData.findIndex((d) => d === item));
            this.xyTableData.splice(index, 1);
            this.dataSource = new MatTableDataSource(this.xyTableData);
        });
        this.selection = new SelectionModel(true, []);
    }
    configureMenuClose(old) {
        const upd = new EventEmitter();
        feed(upd.pipe(filter(event => {
            console.log(`menu.close(${JSON.stringify(event)})`);
            if (event === 'click') {
                // Ignore clicks inside the menu 
                return false;
            }
            return true;
        })), old);
        return upd;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: XyTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.1", type: XyTableComponent, selector: "xy-table", inputs: { xyTableData: "xyTableData", columnDefs: "columnDefs", expandcolumnDefs: "expandcolumnDefs", expandRequired: "expandRequired", expandTableDetail: "expandTableDetail", pageSize: "pageSize", pageSizeOptions: "pageSizeOptions", length: "length", ariaLabel: ["aria-label", "ariaLabel"], DisplayPaginatorLabel: "DisplayPaginatorLabel", expandAsData: "expandAsData", expandAsTableData: "expandAsTableData", isEditRequired: "isEditRequired", isDeleteRequired: "isDeleteRequired", tableactionBar: "tableactionBar", tableSearchBar: "tableSearchBar", deleteAllTrig: "deleteAllTrig", columnHideTrig: "columnHideTrig", searchPlaceholder: "searchPlaceholder", tableRefresh: "tableRefresh", noDataMessage: "noDataMessage", customfilter: "customfilter", CustomELement: "CustomELement", buttonText: "buttonText" }, outputs: { deleteRow: "deleteRow", expandDetail: "expandDetail", editRow: "editRow", refreshTrig: "refreshTrig", action: "action", buttonAction: "buttonAction" }, host: { listeners: { "click": "onHostClick($event)" } }, viewQueries: [{ propertyName: "sort", first: true, predicate: MatSort, descendants: true, static: true }, { propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true, static: true }, { propertyName: "table", first: true, predicate: MatTable, descendants: true }, { propertyName: "matButton", first: true, predicate: ["button"], descendants: true }, { propertyName: "searchMenu", first: true, predicate: ["searchMenu"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<!-- <div class=\"delete-btn\">\r\n  <mat-icon (click)=\"removeSelectedRows()\">delete</mat-icon>\r\n</div> -->\r\n\r\n <!-- <div class=\"mat-elevation-z8\">\r\n  <table mat-table multiTemplateDataRows [dataSource]=\"dataSource\" aria-describedby=\"table\" matSort class=\"scroller\">\r\n    <ng-container *ngFor=\"let column of columnDefs\" [matColumnDef]=column.columnDef>\r\n        <ng-container *ngIf=\"column.checkboxRequired === true\">\r\n          <th mat-header-cell *matHeaderCellDef>\r\n  \r\n            <mat-checkbox \r\n                  (change)=\"$event ? masterToggle() : null\"\r\n                  [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                  [indeterminate]=\"selection.hasValue() && !isAllSelected()\" (focus)=\"selectRow(column)\">\r\n            </mat-checkbox> \r\n          </th> \r\n        </ng-container>\r\n        <ng-container *ngIf=\"column.isSort === true\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> {{column.headerCellDef | titlecase}} </th>\r\n        </ng-container> \r\n        <ng-container *ngIf=\"column.isSort === false\">\r\n          <th mat-header-cell *matHeaderCellDef> {{column.headerCellDef | titlecase}} </th>\r\n        </ng-container>\r\n\r\n\r\n        <td mat-cell *matCellDef=\"let data\">\r\n          <xy-table-cell [columnDef]=\"column\" [data]=\"data\">  </xy-table-cell>\r\n          <ng-container *ngIf=\"column.cellDef.type === 'menu'\">\r\n            <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"arrowBtn\" aria-label=\"menu\">\r\n              <mat-icon>more_vert</mat-icon>\r\n            </button> \r\n            <mat-menu #menu=\"matMenu\">\r\n              <button mat-menu-item   (click)=\"edit(data)\" *ngIf=\"isEditRequired\">\r\n                <mat-icon>edit</mat-icon>\r\n                <span>Edit</span>\r\n              </button>\r\n              <button mat-menu-item  (click)=\"delete(data)\" *ngIf=\"isDeleteRequired\">\r\n                <mat-icon>delete_outline</mat-icon>\r\n                <span>Delete</span>\r\n              </button> \r\n            </mat-menu> \r\n          </ng-container>\r\n\r\n          <ng-container *ngIf=\"column.cellDef.type === 'action'\">\r\n            <button mat-icon-button aria-label=\"expand row\" class=\"arrowBtn\" (click)=\"toggleRow(data)\" *ngIf=\"expandRequired\">\r\n                <mat-icon *ngIf=\"expandedElement !== data\">keyboard_arrow_down</mat-icon>\r\n                <mat-icon *ngIf=\"expandedElement === data\">keyboard_arrow_up</mat-icon>\r\n            </button>\r\n          </ng-container>\r\n          \r\n    <ng-container  *ngIf=\"column.checkboxRequired == true\"> \r\n              <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                (change)=\"$event ? selection.toggle(data) : null\"\r\n                [checked]=\"selection.isSelected(data)\">\r\n              </mat-checkbox>\r\n          </ng-container>\r\n        </td>\r\n    </ng-container>\r\n  \r\n    <ng-container matColumnDef=\"expandedDetail\">\r\n      <tr>\r\n        <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"columnsToDisplay.length\">\r\n          <div class=\"inner-table-detail\" *ngIf=\"expandRequired\"\r\n            [@detailExpand]=\"element?.id == expandedElement?.id ? 'expanded' : 'collapsed'\">\r\n            <div class=\"collapse-table mat-elevation-z8\" *ngIf=\"expandedElement\">\r\n               \r\n              \r\n                <div *ngIf=\"expandAsData\">\r\n                  <p>{{element?.expandableRow?.expandData}}</p>\r\n                </div>\r\n  \r\n  \r\n                <div *ngIf=\"expandAsTableData\">\r\n                  <table mat-table multiTemplateDataRows [dataSource]=\"expandedDataSource\" aria-describedby=\"table\" \r\n                    class=\"scroller\" >\r\n      \r\n                    <ng-container *ngFor=\"let column of expandcolumnDefs\" [matColumnDef]=column.columnDef>\r\n                      <ng-container *ngIf=\"column.checkboxRequired === true\">\r\n                        <th mat-header-cell *matHeaderCellDef>\r\n                        </th>\r\n                      </ng-container>\r\n                      <ng-container>\r\n                        <th mat-header-cell *matHeaderCellDef> {{column.headerCellDef | titlecase}} </th>\r\n                      </ng-container>\r\n      \r\n                      <td mat-cell *matCellDef=\"let data\">\r\n                        <xy-table-cell [columnDef]=\"column\" [data]=\"data\"></xy-table-cell>\r\n                       \r\n                    \r\n                        <ng-container *ngIf=\"column.checkboxRequired === true\">\r\n                          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                          (change)=\"$event ? selection.toggle(data) : null\"\r\n                          [checked]=\"selection.isSelected(data)\"\r\n                          >\r\n                        </mat-checkbox>\r\n                        </ng-container>\r\n                      </td>\r\n                    </ng-container>\r\n      \r\n                    <ng-container >\r\n                      <tr mat-header-row *matHeaderRowDef=\"expandColumnsToDisplay; sticky:true\"></tr>\r\n                      <tr mat-row *matRowDef=\"let element; columns: expandColumnsToDisplay;\" \r\n                      [ngClass]=\"{highlighted: selection.isSelected(element)}\" (click)=\"selectRow(element)\">\r\n                      </tr>\r\n                    </ng-container>\r\n                  </table>\r\n                </div>\r\n               \r\n            </div>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n      <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay; sticky:true\"></tr>\r\n\r\n      <tr mat-row *matRowDef=\"let element, let data; columns: columnsToDisplay;\"\r\n        [class.accordion-element-row]=\"element.addresses?.data.length\"\r\n        [class.accordion-active]=\"expandedElement?.id === element?.id\"\r\n        (click)=\"onClickRight($event, data)\" (mousedown)=\"onMouseDown($event, data)\" (mouseup)=\"onMouseUp($event, data)\"\r\n        [ngClass]=\"{highlighted: selection.isSelected(element)}\" (click)=\"selectRow(element)\">\r\n      </tr>\r\n      \r\n      <tr mat-row  *matRowDef=\"let data; columns: ['expandedDetail']\"  class=\"innertable-row\"></tr>\r\n    </ng-container>\r\n    \r\n\r\n  </table>\r\n  \r\n  <mat-paginator [length]=\"length\"\r\n                [pageSize]=\"pageSize\"\r\n                [pageSizeOptions]=\"pageSizeOptions\"\r\n                [attr.aria-label]=\"ariaLabel\"\r\n                showFirstLastButtons >\r\n  </mat-paginator>\r\n</div> -->\r\n<div class=\"table-actionbar\" *ngIf=\"tableactionBar\">\r\n  <div class=\"left-col\">\r\n    <div class=\"filter-search\" *ngIf=\"tableSearchBar\">\r\n      <xy-input placeholder=\"{{searchPlaceholder}}\" (value)=\"value\" small (keyup)=\"applyFilter($event)\"></xy-input>\r\n    </div> \r\n  </div>\r\n  <div class=\"right-col\">\r\n      <xy-button icon-button icon=\"delete\" color=\"critical\" (click)=\"removeSelectedRows()\" *ngIf=\"deleteAllTrig\"> </xy-button>\r\n      <xy-button icon-button icon=\"sync\" color=\"accent\" (click)=\"refresh($event)\" *ngIf=\"tableRefresh\"></xy-button>\r\n      <xy-button icon-button color=\"accent\" icon=\"tune\"  [matMenuTriggerFor]=\"menu\" class=\"table-config-menu\" *ngIf=\"columnHideTrig\">\r\n        <mat-menu #menu=\"matMenu\">\r\n          <span class=\"table-config-menu-label\">Edit Columns</span>\r\n          <div class=\"table-config-menu-options\">\r\n            <mat-checkbox \r\n              *ngFor=\"let cd of columnDefs; let i = index\"\r\n              (click)=\"$event.stopPropagation()\" [(ngModel)]=\"cd.visible\">\r\n              {{cd.headerCellDef}}\r\n            </mat-checkbox>\r\n          </div>\r\n      </mat-menu>\r\n      </xy-button>\r\n  </div>\r\n</div>\r\n\r\n\r\n<div class=\"mat-elevation-z8\">\r\n  <table mat-table multiTemplateDataRows [dataSource]=\"dataSource\" aria-describedby=\"table\" matSort class=\"scroller\">\r\n    <ng-container *ngFor=\"let column of columnDefs\" [matColumnDef]=column.columnDef>\r\n        <ng-container *ngIf=\"column.checkboxRequired === true\">\r\n          <th mat-header-cell *matHeaderCellDef>\r\n            <!-- column checkbox -->\r\n            <mat-checkbox \r\n            (change)=\"$event ? masterToggle() : null\"\r\n                    [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\" (focus)=\"selectRow(column)\">\r\n            </mat-checkbox>\r\n          </th>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"column.isSort === true\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n            {{column.headerCellDef | titlecase}} \r\n            <div class=\"d-flex\">\r\n              <!-- <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" [matMenuTriggerFor]=\"searchMenu\">  \r\n                <mat-icon>filter_list</mat-icon>\r\n              </button> -->\r\n              <mat-menu #searchMenu=\"matMenu\">\r\n                <ng-template matMenuContent>\r\n                  <!-- <div class=\"filterBox\" style=\"width: 200px; height: 233px;\">\r\n                    <div class=\"filter-search\" >\r\n                      <xy-input placeholder=\"Global Filter\" (value)=\"value\" small (keyup)=\"applyFilter($event)\"></xy-input>\r\n                    </div> \r\n                    \r\n                    <h6 class=\"filterTitle\">Filter By Column</h6>\r\n                    <div class=\"columnBox\">\r\n                      <div class=\"options\" *ngFor=\"let empfilter of empFilters;\">\r\n                        <h6>{{empfilter.name}}</h6>\r\n                        <div class=\"filter-group\"  *ngFor=\"let op of empfilter.options;  let i = index\"> \r\n                          <mat-checkbox  [value]=\"op\"\r\n                          (change)=\"applyEmpFilter($event, empfilter)\" (value)=\"empfilter.defaultValue\">\r\n                          {{op}}\r\n                          </mat-checkbox>\r\n                          <hr>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                        <h6>Custom Filter Fields</h6>\r\n                          <ng-container *ngTemplateOutlet=\"intlies\"></ng-container>\r\n                    </div>\r\n                      <br>\r\n                    </div> \r\n                 -->\r\n                </ng-template>\r\n              </mat-menu>\r\n            </div>  \r\n          </th>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"column.isSort === false\">\r\n          <th mat-header-cell *matHeaderCellDef> {{column.headerCellDef | titlecase}}</th>\r\n        </ng-container>\r\n\r\n       \r\n        <td mat-cell *matCellDef=\"let data\">\r\n          <xy-table-cell [columnDef]=\"column\" [data]=\"data\"></xy-table-cell>\r\n         \r\n\r\n          <ng-container *ngIf=\"column.cellDef.type === 'menu'\">\r\n             <!-- <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"arrowBtn\" aria-label=\"menu\">\r\n              <mat-icon>more_vert</mat-icon>\r\n            </button> \r\n             <mat-menu #menu=\"matMenu\">\r\n              <button mat-menu-item  (click)=\"edit(data)\" *ngIf=\"isEditRequired\">\r\n                <mat-icon>edit</mat-icon>\r\n                <span>Edit</span>\r\n              </button>\r\n              <button mat-menu-item  (click)=\"delete(data)\" *ngIf=\"isDeleteRequired\">\r\n                <mat-icon>delete_outline</mat-icon>\r\n                <span>Delete</span>\r\n              </button>\r\n            </mat-menu>  -->\r\n            <button mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\" >\r\n              <mat-icon>more_vert</mat-icon>\r\n            </button>\r\n            <mat-menu #menu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"delete(data)\">\r\n                <mat-icon>delete</mat-icon>\r\n                <span>Delete</span>\r\n              </button>\r\n              <button mat-menu-item (click)=\"edit(data)\">\r\n                <mat-icon>edit</mat-icon>\r\n                <span>Edit</span>\r\n              </button>\r\n              <button mat-menu-item (click)=\"onViewClick()\">\r\n                <mat-icon>visibility</mat-icon>\r\n                <span>View Details</span>\r\n              </button>\r\n            </mat-menu>\r\n          </ng-container>\r\n\r\n          <!-- <ng-container *ngIf=\"column.CustomELement == true\">\r\n            <ng-container *ngTemplateOutlet=\"intlies2\"></ng-container>\r\n          </ng-container> -->\r\n\r\n      \r\n          <!-- <ng-container matColumnDef=\"action\">\r\n            <mat-header-cell *matHeaderCellDef>Action</mat-header-cell>\r\n            <mat-cell *matCellDef=\"let column\" action-buttons  (buttonAction)=\"onTableAction($event)\">\r\n              {{ column.visible }}\r\n            </mat-cell>\r\n          </ng-container>  -->\r\n          \r\n          <!-- column checkbox -->\r\n            \r\n          <ng-container  *ngIf=\"column.checkboxRequired == true\"> \r\n            <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n              (change)=\"$event ? selection.toggle(data) : null\"\r\n              [checked]=\"selection.isSelected(data)\">\r\n            </mat-checkbox>\r\n          </ng-container>\r\n\r\n          \r\n          <!-- <ng-container *ngIf=\"column.htmlElement == true\"> \r\n              <xy-button light-weight-button color=\"accent\"  (click)=\"onClick($event)\">{{buttonText}}</xy-button>\r\n          </ng-container> -->\r\n\r\n        </td>\r\n     \r\n      \r\n    </ng-container>\r\n\r\n    <!-- Expanded Content Column -->\r\n    <ng-container matColumnDef=\"expandedDetail\">\r\n      <tr>\r\n        <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"columnsToDisplay.length\">\r\n          <div class=\"inner-table-detail\" *ngIf=\"expandRequired\"\r\n            [@detailExpand]=\"element?.id == expandedElement?.id ? 'expanded' : 'collapsed'\">\r\n            <div class=\"collapse-table mat-elevation-z8\" *ngIf=\"expandedElement\">\r\n                <!-- Expandable View Data -->\r\n                <div *ngIf=\"expandAsData\">\r\n                  <p>{{element?.expandableRow?.expandData}}</p>\r\n                </div>\r\n                <!-- Expandable View table -->\r\n                <div *ngIf=\"expandAsTableData\">\r\n                  <table mat-table multiTemplateDataRows [dataSource]=\"expandedDataSource\" aria-describedby=\"table\" \r\n                    class=\"scroller\" >\r\n      \r\n                    <ng-container *ngFor=\"let column of expandcolumnDefs\" [matColumnDef]=column.columnDef>\r\n                      <ng-container *ngIf=\"column.checkboxRequired === true\">\r\n                        <th mat-header-cell *matHeaderCellDef></th>\r\n                      </ng-container>\r\n\r\n                      <ng-container>\r\n                        <th mat-header-cell *matHeaderCellDef> {{column.headerCellDef | titlecase}} </th>\r\n                      </ng-container>\r\n      \r\n                      <td mat-cell *matCellDef=\"let data\">\r\n                        <xy-table-cell [columnDef]=\"column\" [data]=\"data\"></xy-table-cell>\r\n                       \r\n                        <!-- column checkbox -->\r\n                        <ng-container *ngIf=\"column.checkboxRequired === true\">\r\n                          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                          (change)=\"$event ? selection.toggle(data) : null\"\r\n                          [checked]=\"selection.isSelected(data)\"\r\n                          >\r\n                        </mat-checkbox>\r\n                        </ng-container>\r\n                      </td>\r\n                    </ng-container>\r\n      \r\n                    <!-- <ng-container>\r\n                      <tr mat-header-row *matHeaderRowDef=\"getDisplayedColumns(); sticky:true\"></tr>\r\n                      <tr mat-row *matRowDef=\"let element; columns: getDisplayedColumns();\" \r\n                      [ngClass]=\"{highlighted: selection.isSelected(element)}\" (click)=\"selectRow(element)\">\r\n                      </tr>\r\n                    </ng-container> -->\r\n                  </table>\r\n                </div>\r\n            </div>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n\r\n          \r\n      \r\n      <tr mat-header-row *matHeaderRowDef=\"getDisplayedColumns(); sticky:true\"></tr>\r\n\r\n      <tr mat-row *matRowDef=\"let element; columns:  dataSource.data.length > 0 && dataSource.filteredData.length > 0 ? getDisplayedColumns() :  ['empty-row'];\"\r\n        [class.accordion-element-row]=\"element.addresses?.data.length\"\r\n        [class.accordion-active]=\"expandedElement?.id === element?.id\"\r\n        [ngClass]=\"{highlighted: selection.isSelected(element)}\" (click)=\"selectRow(element)\">\r\n      </tr>\r\n      <tr mat-row  ></tr>\r\n    </ng-container>\r\n    \r\n  </table>\r\n\r\n  <td class=\"noData\" *ngIf=\"dataSource.filteredData.length <= 0\">\r\n    {{noDataMessage}}\r\n  </td>\r\n\r\n  <mat-paginator [length]=\"length\"\r\n                [pageSize]=\"pageSize\"\r\n                [pageSizeOptions]=\"pageSizeOptions\"\r\n                [attr.aria-label]=\"ariaLabel\"\r\n                showFirstLastButtons >\r\n  </mat-paginator>\r\n\r\n</div>\r\n\r\n<!-- <div class=\"table-actionbar\">\r\n  <div class=\"action-box\">\r\n    <button color=\"warn\" mat-mini-fab aria-label=\"Example icon button with a home icon\"  (click)=\"removeSelectedRows()\">\r\n      <mat-icon>delete</mat-icon>\r\n    </button>\r\n    <button color=\"primary\" mat-mini-fab aria-label=\"Example icon button with a home icon\" >\r\n      <mat-icon>refresh</mat-icon>\r\n    </button>\r\n\r\n    <button  mat-mini-fab color=\"primary\"  [matMenuTriggerFor]=\"menu\" class=\"table-config-menu\">\r\n      <mat-icon aria-hidden=\"false\" aria-label=\"Example home icon\">settings</mat-icon>\r\n      <mat-menu #menu=\"matMenu\">\r\n        <span class=\"table-config-menu-label\">Edit Columns</span>\r\n        <div class=\"table-config-menu-options\">\r\n          <mat-checkbox \r\n            *ngFor=\"let cd of columns; let i = index\"\r\n            (click)=\"$event.stopPropagation()\"\r\n            [(ngModel)]=\"cd.visible\">\r\n            {{cd.header}}\r\n          </mat-checkbox>\r\n        </div>\r\n    </mat-menu>\r\n    </button>\r\n    \r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n<mat-table  #table [dataSource]=\"dataSource\" multiTemplateDataRows class=\"mat-elevation-z8\" matSort>\r\n\r\n\r\n  <ng-container matColumnDef=\"select\" >\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\r\n        [checked]=\"selection.hasValue() && isAllSelected()\" [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n      </mat-checkbox>\r\n    </mat-header-cell>\r\n    <mat-cell *cdkCellDef=\"let row\">\r\n      <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\"\r\n        [checked]=\"selection.isSelected(row)\">\r\n      </mat-checkbox>\r\n    </mat-cell>\r\n  </ng-container>\r\n\r\n\r\n  <ng-container *ngFor=\"let column of columns;\"  [matColumnDef]=\"column.columnDef\">\r\n    <mat-header-cell *cdkHeaderCellDef mat-sort-header>\r\n        {{column.header}}\r\n        <div class=\"d-flex\">\r\n          <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" [matMenuTriggerFor]=\"menu\">\r\n            <mat-icon>filter_list</mat-icon>\r\n          </button>\r\n          <mat-menu #menu>\r\n            <ng-template matMenuContent>\r\n              <div>\r\n                <mat-checkbox class=\"mat-menu-item\">{{column.visible}}</mat-checkbox>  \r\n              </div>\r\n              <div class=\"filterBox\">\r\n                  <div class=\"filterGroup\">\r\n                    <label for=\"\">By {{column.header}}</label>\r\n                    <input type=\"text\" [(ngModel)]=\"value\" (keyup)=\"applyFilter($event)\"> \r\n                  </div>\r\n                  <div>\r\n                    <ng-container *ngTemplateOutlet=\"intlies\"></ng-container>\r\n                  </div>\r\n              </div>\r\n            </ng-template>\r\n          </mat-menu>\r\n        </div>\r\n    </mat-header-cell>\r\n    <mat-cell *cdkCellDef=\"let row\">{{ row[column.columnDef] }}</mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"expandedDetail\">\r\n    <tr>\r\n      <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"columnsToDisplay.length\">\r\n        <div class=\"inner-table-detail\" *ngIf=\"expandRequired\"\r\n          [@detailExpand]=\"element?.id == expandedElement?.id ? 'expanded' : 'collapsed'\">\r\n          <div class=\"collapse-table mat-elevation-z8\" *ngIf=\"expandedElement\">\r\n             \r\n              <div *ngIf=\"expandAsData\">\r\n                <p>{{element?.expandableRow?.expandData}}</p>\r\n              </div>\r\n\r\n              <div *ngIf=\"expandAsTableData\">\r\n                <table mat-table multiTemplateDataRows [dataSource]=\"expandedDataSource\" aria-describedby=\"table\" \r\n                  class=\"scroller\" >\r\n    \r\n                  <ng-container *ngFor=\"let column of expandcolumnDefs\" [matColumnDef]=column.columnDef>\r\n                    <ng-container >\r\n                      <th mat-header-cell *matHeaderCellDef>\r\n                      </th>\r\n                    </ng-container>\r\n                    <ng-container>\r\n                      <th mat-header-cell *matHeaderCellDef> {{column.columnDef | titlecase}} </th>\r\n                    </ng-container>\r\n    \r\n                  </ng-container>\r\n    \r\n                  <ng-container >\r\n                    <tr mat-header-row *matHeaderRowDef=\"expandColumnsToDisplay; sticky:true\"></tr>\r\n                    <tr mat-row *matRowDef=\"let element; columns: expandColumnsToDisplay;\" \r\n                    [ngClass]=\"{highlighted: selection.isSelected(element)}\" (click)=\"selectRow(element)\">\r\n                    </tr>\r\n                  </ng-container>\r\n                </table>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay; sticky:true\"></tr>\r\n\r\n    <tr mat-row  *matRowDef=\"let data; columns: ['expandedDetail']\"  class=\"innertable-row\"></tr>\r\n  </ng-container>\r\n  \r\n\r\n \r\n  <ng-container matColumnDef=\"action\">\r\n    <mat-header-cell *matHeaderCellDef>Action</mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\" action-buttons  (buttonAction)=\"onTableAction($event)\">\r\n      {{ element.weight }}\r\n    </mat-cell>\r\n  </ng-container>\r\n  \r\n  <mat-header-row *matHeaderRowDef=\"getDisplayedColumns();\" ></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: getDisplayedColumns();\"  [class.accordion-element-row]=\"row.addresses?.data.length\"\r\n  [class.accordion-active]=\"expandedElement?.id === row?.id\"\r\n  [ngClass]=\"{highlighted: selection.isSelected(row)}\" (click)=\"selectRow(row)\"></mat-row>\r\n</mat-table>\r\n\r\n\r\n<mat-paginator [length]=\"length\"\r\n              [pageSize]=\"pageSize\"\r\n              [pageSizeOptions]=\"pageSizeOptions\"\r\n              [attr.aria-label]=\"ariaLabel\"\r\n              showFirstLastButtons >\r\n</mat-paginator>  -->", styles: [""], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i2.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i2.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i2.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i2.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i2.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i2.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i2.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i2.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i2.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "component", type: i3.MatIconButton, selector: "button[mat-icon-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i5.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { kind: "component", type: i5.MatMenuItem, selector: "[mat-menu-item]", inputs: ["disabled", "disableRipple", "role"], exportAs: ["matMenuItem"] }, { kind: "directive", type: i5.MatMenuContent, selector: "ng-template[matMenuContent]" }, { kind: "directive", type: i5.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { kind: "component", type: i6.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }, { kind: "component", type: i7.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex"], exportAs: ["matCheckbox"] }, { kind: "directive", type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i8.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i9.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortActive", "matSortStart", "matSortDirection", "matSortDisableClear"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { kind: "component", type: i9.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "mat-sort-header", "arrowPosition", "start", "sortActionDescription", "disableClear"], exportAs: ["matSortHeader"] }, { kind: "component", type: i10.XyInputComponent, selector: "xy-input", inputs: ["matAutocomplete", "name", "label", "placeholder", "note", "formGroup", "formControl", "inputFormControl", "errorStateMatcher", "isXyAutocomplete", "isDatePicker", "datePicker", "matDatepicker", "readonly", "type", "required", "small", "disabled", "has-error", "is-loading", "edited", "success", "value"] }, { kind: "component", type: i11.XyButtonComponent, selector: "xy-button", inputs: ["type", "id", "name", "button-type", "color", "disableRipple", "disabled", "aria-label", "default-focus", "tabindex", "text-button", "light-weight-button", "standard-button", "icon-button", "cdkFocusInitial", "icon"] }, { kind: "component", type: i12.XyTableCellComponent, selector: "xy-table-cell", inputs: ["columnDef", "data"] }, { kind: "pipe", type: i1.TitleCasePipe, name: "titlecase" }], animations: [
            trigger('detailExpand', [
                state('collapsed', style({ height: '0px' })),
                state('expanded', style({ height: '*' })),
                transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
            ]),
        ] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: XyTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'xy-table', animations: [
                        trigger('detailExpand', [
                            state('collapsed', style({ height: '0px' })),
                            state('expanded', style({ height: '*' })),
                            transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                        ]),
                    ], template: "<!-- <div class=\"delete-btn\">\r\n  <mat-icon (click)=\"removeSelectedRows()\">delete</mat-icon>\r\n</div> -->\r\n\r\n <!-- <div class=\"mat-elevation-z8\">\r\n  <table mat-table multiTemplateDataRows [dataSource]=\"dataSource\" aria-describedby=\"table\" matSort class=\"scroller\">\r\n    <ng-container *ngFor=\"let column of columnDefs\" [matColumnDef]=column.columnDef>\r\n        <ng-container *ngIf=\"column.checkboxRequired === true\">\r\n          <th mat-header-cell *matHeaderCellDef>\r\n  \r\n            <mat-checkbox \r\n                  (change)=\"$event ? masterToggle() : null\"\r\n                  [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                  [indeterminate]=\"selection.hasValue() && !isAllSelected()\" (focus)=\"selectRow(column)\">\r\n            </mat-checkbox> \r\n          </th> \r\n        </ng-container>\r\n        <ng-container *ngIf=\"column.isSort === true\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> {{column.headerCellDef | titlecase}} </th>\r\n        </ng-container> \r\n        <ng-container *ngIf=\"column.isSort === false\">\r\n          <th mat-header-cell *matHeaderCellDef> {{column.headerCellDef | titlecase}} </th>\r\n        </ng-container>\r\n\r\n\r\n        <td mat-cell *matCellDef=\"let data\">\r\n          <xy-table-cell [columnDef]=\"column\" [data]=\"data\">  </xy-table-cell>\r\n          <ng-container *ngIf=\"column.cellDef.type === 'menu'\">\r\n            <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"arrowBtn\" aria-label=\"menu\">\r\n              <mat-icon>more_vert</mat-icon>\r\n            </button> \r\n            <mat-menu #menu=\"matMenu\">\r\n              <button mat-menu-item   (click)=\"edit(data)\" *ngIf=\"isEditRequired\">\r\n                <mat-icon>edit</mat-icon>\r\n                <span>Edit</span>\r\n              </button>\r\n              <button mat-menu-item  (click)=\"delete(data)\" *ngIf=\"isDeleteRequired\">\r\n                <mat-icon>delete_outline</mat-icon>\r\n                <span>Delete</span>\r\n              </button> \r\n            </mat-menu> \r\n          </ng-container>\r\n\r\n          <ng-container *ngIf=\"column.cellDef.type === 'action'\">\r\n            <button mat-icon-button aria-label=\"expand row\" class=\"arrowBtn\" (click)=\"toggleRow(data)\" *ngIf=\"expandRequired\">\r\n                <mat-icon *ngIf=\"expandedElement !== data\">keyboard_arrow_down</mat-icon>\r\n                <mat-icon *ngIf=\"expandedElement === data\">keyboard_arrow_up</mat-icon>\r\n            </button>\r\n          </ng-container>\r\n          \r\n    <ng-container  *ngIf=\"column.checkboxRequired == true\"> \r\n              <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                (change)=\"$event ? selection.toggle(data) : null\"\r\n                [checked]=\"selection.isSelected(data)\">\r\n              </mat-checkbox>\r\n          </ng-container>\r\n        </td>\r\n    </ng-container>\r\n  \r\n    <ng-container matColumnDef=\"expandedDetail\">\r\n      <tr>\r\n        <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"columnsToDisplay.length\">\r\n          <div class=\"inner-table-detail\" *ngIf=\"expandRequired\"\r\n            [@detailExpand]=\"element?.id == expandedElement?.id ? 'expanded' : 'collapsed'\">\r\n            <div class=\"collapse-table mat-elevation-z8\" *ngIf=\"expandedElement\">\r\n               \r\n              \r\n                <div *ngIf=\"expandAsData\">\r\n                  <p>{{element?.expandableRow?.expandData}}</p>\r\n                </div>\r\n  \r\n  \r\n                <div *ngIf=\"expandAsTableData\">\r\n                  <table mat-table multiTemplateDataRows [dataSource]=\"expandedDataSource\" aria-describedby=\"table\" \r\n                    class=\"scroller\" >\r\n      \r\n                    <ng-container *ngFor=\"let column of expandcolumnDefs\" [matColumnDef]=column.columnDef>\r\n                      <ng-container *ngIf=\"column.checkboxRequired === true\">\r\n                        <th mat-header-cell *matHeaderCellDef>\r\n                        </th>\r\n                      </ng-container>\r\n                      <ng-container>\r\n                        <th mat-header-cell *matHeaderCellDef> {{column.headerCellDef | titlecase}} </th>\r\n                      </ng-container>\r\n      \r\n                      <td mat-cell *matCellDef=\"let data\">\r\n                        <xy-table-cell [columnDef]=\"column\" [data]=\"data\"></xy-table-cell>\r\n                       \r\n                    \r\n                        <ng-container *ngIf=\"column.checkboxRequired === true\">\r\n                          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                          (change)=\"$event ? selection.toggle(data) : null\"\r\n                          [checked]=\"selection.isSelected(data)\"\r\n                          >\r\n                        </mat-checkbox>\r\n                        </ng-container>\r\n                      </td>\r\n                    </ng-container>\r\n      \r\n                    <ng-container >\r\n                      <tr mat-header-row *matHeaderRowDef=\"expandColumnsToDisplay; sticky:true\"></tr>\r\n                      <tr mat-row *matRowDef=\"let element; columns: expandColumnsToDisplay;\" \r\n                      [ngClass]=\"{highlighted: selection.isSelected(element)}\" (click)=\"selectRow(element)\">\r\n                      </tr>\r\n                    </ng-container>\r\n                  </table>\r\n                </div>\r\n               \r\n            </div>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n      <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay; sticky:true\"></tr>\r\n\r\n      <tr mat-row *matRowDef=\"let element, let data; columns: columnsToDisplay;\"\r\n        [class.accordion-element-row]=\"element.addresses?.data.length\"\r\n        [class.accordion-active]=\"expandedElement?.id === element?.id\"\r\n        (click)=\"onClickRight($event, data)\" (mousedown)=\"onMouseDown($event, data)\" (mouseup)=\"onMouseUp($event, data)\"\r\n        [ngClass]=\"{highlighted: selection.isSelected(element)}\" (click)=\"selectRow(element)\">\r\n      </tr>\r\n      \r\n      <tr mat-row  *matRowDef=\"let data; columns: ['expandedDetail']\"  class=\"innertable-row\"></tr>\r\n    </ng-container>\r\n    \r\n\r\n  </table>\r\n  \r\n  <mat-paginator [length]=\"length\"\r\n                [pageSize]=\"pageSize\"\r\n                [pageSizeOptions]=\"pageSizeOptions\"\r\n                [attr.aria-label]=\"ariaLabel\"\r\n                showFirstLastButtons >\r\n  </mat-paginator>\r\n</div> -->\r\n<div class=\"table-actionbar\" *ngIf=\"tableactionBar\">\r\n  <div class=\"left-col\">\r\n    <div class=\"filter-search\" *ngIf=\"tableSearchBar\">\r\n      <xy-input placeholder=\"{{searchPlaceholder}}\" (value)=\"value\" small (keyup)=\"applyFilter($event)\"></xy-input>\r\n    </div> \r\n  </div>\r\n  <div class=\"right-col\">\r\n      <xy-button icon-button icon=\"delete\" color=\"critical\" (click)=\"removeSelectedRows()\" *ngIf=\"deleteAllTrig\"> </xy-button>\r\n      <xy-button icon-button icon=\"sync\" color=\"accent\" (click)=\"refresh($event)\" *ngIf=\"tableRefresh\"></xy-button>\r\n      <xy-button icon-button color=\"accent\" icon=\"tune\"  [matMenuTriggerFor]=\"menu\" class=\"table-config-menu\" *ngIf=\"columnHideTrig\">\r\n        <mat-menu #menu=\"matMenu\">\r\n          <span class=\"table-config-menu-label\">Edit Columns</span>\r\n          <div class=\"table-config-menu-options\">\r\n            <mat-checkbox \r\n              *ngFor=\"let cd of columnDefs; let i = index\"\r\n              (click)=\"$event.stopPropagation()\" [(ngModel)]=\"cd.visible\">\r\n              {{cd.headerCellDef}}\r\n            </mat-checkbox>\r\n          </div>\r\n      </mat-menu>\r\n      </xy-button>\r\n  </div>\r\n</div>\r\n\r\n\r\n<div class=\"mat-elevation-z8\">\r\n  <table mat-table multiTemplateDataRows [dataSource]=\"dataSource\" aria-describedby=\"table\" matSort class=\"scroller\">\r\n    <ng-container *ngFor=\"let column of columnDefs\" [matColumnDef]=column.columnDef>\r\n        <ng-container *ngIf=\"column.checkboxRequired === true\">\r\n          <th mat-header-cell *matHeaderCellDef>\r\n            <!-- column checkbox -->\r\n            <mat-checkbox \r\n            (change)=\"$event ? masterToggle() : null\"\r\n                    [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\" (focus)=\"selectRow(column)\">\r\n            </mat-checkbox>\r\n          </th>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"column.isSort === true\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n            {{column.headerCellDef | titlecase}} \r\n            <div class=\"d-flex\">\r\n              <!-- <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" [matMenuTriggerFor]=\"searchMenu\">  \r\n                <mat-icon>filter_list</mat-icon>\r\n              </button> -->\r\n              <mat-menu #searchMenu=\"matMenu\">\r\n                <ng-template matMenuContent>\r\n                  <!-- <div class=\"filterBox\" style=\"width: 200px; height: 233px;\">\r\n                    <div class=\"filter-search\" >\r\n                      <xy-input placeholder=\"Global Filter\" (value)=\"value\" small (keyup)=\"applyFilter($event)\"></xy-input>\r\n                    </div> \r\n                    \r\n                    <h6 class=\"filterTitle\">Filter By Column</h6>\r\n                    <div class=\"columnBox\">\r\n                      <div class=\"options\" *ngFor=\"let empfilter of empFilters;\">\r\n                        <h6>{{empfilter.name}}</h6>\r\n                        <div class=\"filter-group\"  *ngFor=\"let op of empfilter.options;  let i = index\"> \r\n                          <mat-checkbox  [value]=\"op\"\r\n                          (change)=\"applyEmpFilter($event, empfilter)\" (value)=\"empfilter.defaultValue\">\r\n                          {{op}}\r\n                          </mat-checkbox>\r\n                          <hr>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                        <h6>Custom Filter Fields</h6>\r\n                          <ng-container *ngTemplateOutlet=\"intlies\"></ng-container>\r\n                    </div>\r\n                      <br>\r\n                    </div> \r\n                 -->\r\n                </ng-template>\r\n              </mat-menu>\r\n            </div>  \r\n          </th>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"column.isSort === false\">\r\n          <th mat-header-cell *matHeaderCellDef> {{column.headerCellDef | titlecase}}</th>\r\n        </ng-container>\r\n\r\n       \r\n        <td mat-cell *matCellDef=\"let data\">\r\n          <xy-table-cell [columnDef]=\"column\" [data]=\"data\"></xy-table-cell>\r\n         \r\n\r\n          <ng-container *ngIf=\"column.cellDef.type === 'menu'\">\r\n             <!-- <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"arrowBtn\" aria-label=\"menu\">\r\n              <mat-icon>more_vert</mat-icon>\r\n            </button> \r\n             <mat-menu #menu=\"matMenu\">\r\n              <button mat-menu-item  (click)=\"edit(data)\" *ngIf=\"isEditRequired\">\r\n                <mat-icon>edit</mat-icon>\r\n                <span>Edit</span>\r\n              </button>\r\n              <button mat-menu-item  (click)=\"delete(data)\" *ngIf=\"isDeleteRequired\">\r\n                <mat-icon>delete_outline</mat-icon>\r\n                <span>Delete</span>\r\n              </button>\r\n            </mat-menu>  -->\r\n            <button mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\" >\r\n              <mat-icon>more_vert</mat-icon>\r\n            </button>\r\n            <mat-menu #menu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"delete(data)\">\r\n                <mat-icon>delete</mat-icon>\r\n                <span>Delete</span>\r\n              </button>\r\n              <button mat-menu-item (click)=\"edit(data)\">\r\n                <mat-icon>edit</mat-icon>\r\n                <span>Edit</span>\r\n              </button>\r\n              <button mat-menu-item (click)=\"onViewClick()\">\r\n                <mat-icon>visibility</mat-icon>\r\n                <span>View Details</span>\r\n              </button>\r\n            </mat-menu>\r\n          </ng-container>\r\n\r\n          <!-- <ng-container *ngIf=\"column.CustomELement == true\">\r\n            <ng-container *ngTemplateOutlet=\"intlies2\"></ng-container>\r\n          </ng-container> -->\r\n\r\n      \r\n          <!-- <ng-container matColumnDef=\"action\">\r\n            <mat-header-cell *matHeaderCellDef>Action</mat-header-cell>\r\n            <mat-cell *matCellDef=\"let column\" action-buttons  (buttonAction)=\"onTableAction($event)\">\r\n              {{ column.visible }}\r\n            </mat-cell>\r\n          </ng-container>  -->\r\n          \r\n          <!-- column checkbox -->\r\n            \r\n          <ng-container  *ngIf=\"column.checkboxRequired == true\"> \r\n            <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n              (change)=\"$event ? selection.toggle(data) : null\"\r\n              [checked]=\"selection.isSelected(data)\">\r\n            </mat-checkbox>\r\n          </ng-container>\r\n\r\n          \r\n          <!-- <ng-container *ngIf=\"column.htmlElement == true\"> \r\n              <xy-button light-weight-button color=\"accent\"  (click)=\"onClick($event)\">{{buttonText}}</xy-button>\r\n          </ng-container> -->\r\n\r\n        </td>\r\n     \r\n      \r\n    </ng-container>\r\n\r\n    <!-- Expanded Content Column -->\r\n    <ng-container matColumnDef=\"expandedDetail\">\r\n      <tr>\r\n        <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"columnsToDisplay.length\">\r\n          <div class=\"inner-table-detail\" *ngIf=\"expandRequired\"\r\n            [@detailExpand]=\"element?.id == expandedElement?.id ? 'expanded' : 'collapsed'\">\r\n            <div class=\"collapse-table mat-elevation-z8\" *ngIf=\"expandedElement\">\r\n                <!-- Expandable View Data -->\r\n                <div *ngIf=\"expandAsData\">\r\n                  <p>{{element?.expandableRow?.expandData}}</p>\r\n                </div>\r\n                <!-- Expandable View table -->\r\n                <div *ngIf=\"expandAsTableData\">\r\n                  <table mat-table multiTemplateDataRows [dataSource]=\"expandedDataSource\" aria-describedby=\"table\" \r\n                    class=\"scroller\" >\r\n      \r\n                    <ng-container *ngFor=\"let column of expandcolumnDefs\" [matColumnDef]=column.columnDef>\r\n                      <ng-container *ngIf=\"column.checkboxRequired === true\">\r\n                        <th mat-header-cell *matHeaderCellDef></th>\r\n                      </ng-container>\r\n\r\n                      <ng-container>\r\n                        <th mat-header-cell *matHeaderCellDef> {{column.headerCellDef | titlecase}} </th>\r\n                      </ng-container>\r\n      \r\n                      <td mat-cell *matCellDef=\"let data\">\r\n                        <xy-table-cell [columnDef]=\"column\" [data]=\"data\"></xy-table-cell>\r\n                       \r\n                        <!-- column checkbox -->\r\n                        <ng-container *ngIf=\"column.checkboxRequired === true\">\r\n                          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                          (change)=\"$event ? selection.toggle(data) : null\"\r\n                          [checked]=\"selection.isSelected(data)\"\r\n                          >\r\n                        </mat-checkbox>\r\n                        </ng-container>\r\n                      </td>\r\n                    </ng-container>\r\n      \r\n                    <!-- <ng-container>\r\n                      <tr mat-header-row *matHeaderRowDef=\"getDisplayedColumns(); sticky:true\"></tr>\r\n                      <tr mat-row *matRowDef=\"let element; columns: getDisplayedColumns();\" \r\n                      [ngClass]=\"{highlighted: selection.isSelected(element)}\" (click)=\"selectRow(element)\">\r\n                      </tr>\r\n                    </ng-container> -->\r\n                  </table>\r\n                </div>\r\n            </div>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n\r\n          \r\n      \r\n      <tr mat-header-row *matHeaderRowDef=\"getDisplayedColumns(); sticky:true\"></tr>\r\n\r\n      <tr mat-row *matRowDef=\"let element; columns:  dataSource.data.length > 0 && dataSource.filteredData.length > 0 ? getDisplayedColumns() :  ['empty-row'];\"\r\n        [class.accordion-element-row]=\"element.addresses?.data.length\"\r\n        [class.accordion-active]=\"expandedElement?.id === element?.id\"\r\n        [ngClass]=\"{highlighted: selection.isSelected(element)}\" (click)=\"selectRow(element)\">\r\n      </tr>\r\n      <tr mat-row  ></tr>\r\n    </ng-container>\r\n    \r\n  </table>\r\n\r\n  <td class=\"noData\" *ngIf=\"dataSource.filteredData.length <= 0\">\r\n    {{noDataMessage}}\r\n  </td>\r\n\r\n  <mat-paginator [length]=\"length\"\r\n                [pageSize]=\"pageSize\"\r\n                [pageSizeOptions]=\"pageSizeOptions\"\r\n                [attr.aria-label]=\"ariaLabel\"\r\n                showFirstLastButtons >\r\n  </mat-paginator>\r\n\r\n</div>\r\n\r\n<!-- <div class=\"table-actionbar\">\r\n  <div class=\"action-box\">\r\n    <button color=\"warn\" mat-mini-fab aria-label=\"Example icon button with a home icon\"  (click)=\"removeSelectedRows()\">\r\n      <mat-icon>delete</mat-icon>\r\n    </button>\r\n    <button color=\"primary\" mat-mini-fab aria-label=\"Example icon button with a home icon\" >\r\n      <mat-icon>refresh</mat-icon>\r\n    </button>\r\n\r\n    <button  mat-mini-fab color=\"primary\"  [matMenuTriggerFor]=\"menu\" class=\"table-config-menu\">\r\n      <mat-icon aria-hidden=\"false\" aria-label=\"Example home icon\">settings</mat-icon>\r\n      <mat-menu #menu=\"matMenu\">\r\n        <span class=\"table-config-menu-label\">Edit Columns</span>\r\n        <div class=\"table-config-menu-options\">\r\n          <mat-checkbox \r\n            *ngFor=\"let cd of columns; let i = index\"\r\n            (click)=\"$event.stopPropagation()\"\r\n            [(ngModel)]=\"cd.visible\">\r\n            {{cd.header}}\r\n          </mat-checkbox>\r\n        </div>\r\n    </mat-menu>\r\n    </button>\r\n    \r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n<mat-table  #table [dataSource]=\"dataSource\" multiTemplateDataRows class=\"mat-elevation-z8\" matSort>\r\n\r\n\r\n  <ng-container matColumnDef=\"select\" >\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\r\n        [checked]=\"selection.hasValue() && isAllSelected()\" [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n      </mat-checkbox>\r\n    </mat-header-cell>\r\n    <mat-cell *cdkCellDef=\"let row\">\r\n      <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\"\r\n        [checked]=\"selection.isSelected(row)\">\r\n      </mat-checkbox>\r\n    </mat-cell>\r\n  </ng-container>\r\n\r\n\r\n  <ng-container *ngFor=\"let column of columns;\"  [matColumnDef]=\"column.columnDef\">\r\n    <mat-header-cell *cdkHeaderCellDef mat-sort-header>\r\n        {{column.header}}\r\n        <div class=\"d-flex\">\r\n          <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" [matMenuTriggerFor]=\"menu\">\r\n            <mat-icon>filter_list</mat-icon>\r\n          </button>\r\n          <mat-menu #menu>\r\n            <ng-template matMenuContent>\r\n              <div>\r\n                <mat-checkbox class=\"mat-menu-item\">{{column.visible}}</mat-checkbox>  \r\n              </div>\r\n              <div class=\"filterBox\">\r\n                  <div class=\"filterGroup\">\r\n                    <label for=\"\">By {{column.header}}</label>\r\n                    <input type=\"text\" [(ngModel)]=\"value\" (keyup)=\"applyFilter($event)\"> \r\n                  </div>\r\n                  <div>\r\n                    <ng-container *ngTemplateOutlet=\"intlies\"></ng-container>\r\n                  </div>\r\n              </div>\r\n            </ng-template>\r\n          </mat-menu>\r\n        </div>\r\n    </mat-header-cell>\r\n    <mat-cell *cdkCellDef=\"let row\">{{ row[column.columnDef] }}</mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"expandedDetail\">\r\n    <tr>\r\n      <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"columnsToDisplay.length\">\r\n        <div class=\"inner-table-detail\" *ngIf=\"expandRequired\"\r\n          [@detailExpand]=\"element?.id == expandedElement?.id ? 'expanded' : 'collapsed'\">\r\n          <div class=\"collapse-table mat-elevation-z8\" *ngIf=\"expandedElement\">\r\n             \r\n              <div *ngIf=\"expandAsData\">\r\n                <p>{{element?.expandableRow?.expandData}}</p>\r\n              </div>\r\n\r\n              <div *ngIf=\"expandAsTableData\">\r\n                <table mat-table multiTemplateDataRows [dataSource]=\"expandedDataSource\" aria-describedby=\"table\" \r\n                  class=\"scroller\" >\r\n    \r\n                  <ng-container *ngFor=\"let column of expandcolumnDefs\" [matColumnDef]=column.columnDef>\r\n                    <ng-container >\r\n                      <th mat-header-cell *matHeaderCellDef>\r\n                      </th>\r\n                    </ng-container>\r\n                    <ng-container>\r\n                      <th mat-header-cell *matHeaderCellDef> {{column.columnDef | titlecase}} </th>\r\n                    </ng-container>\r\n    \r\n                  </ng-container>\r\n    \r\n                  <ng-container >\r\n                    <tr mat-header-row *matHeaderRowDef=\"expandColumnsToDisplay; sticky:true\"></tr>\r\n                    <tr mat-row *matRowDef=\"let element; columns: expandColumnsToDisplay;\" \r\n                    [ngClass]=\"{highlighted: selection.isSelected(element)}\" (click)=\"selectRow(element)\">\r\n                    </tr>\r\n                  </ng-container>\r\n                </table>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay; sticky:true\"></tr>\r\n\r\n    <tr mat-row  *matRowDef=\"let data; columns: ['expandedDetail']\"  class=\"innertable-row\"></tr>\r\n  </ng-container>\r\n  \r\n\r\n \r\n  <ng-container matColumnDef=\"action\">\r\n    <mat-header-cell *matHeaderCellDef>Action</mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\" action-buttons  (buttonAction)=\"onTableAction($event)\">\r\n      {{ element.weight }}\r\n    </mat-cell>\r\n  </ng-container>\r\n  \r\n  <mat-header-row *matHeaderRowDef=\"getDisplayedColumns();\" ></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: getDisplayedColumns();\"  [class.accordion-element-row]=\"row.addresses?.data.length\"\r\n  [class.accordion-active]=\"expandedElement?.id === row?.id\"\r\n  [ngClass]=\"{highlighted: selection.isSelected(row)}\" (click)=\"selectRow(row)\"></mat-row>\r\n</mat-table>\r\n\r\n\r\n<mat-paginator [length]=\"length\"\r\n              [pageSize]=\"pageSize\"\r\n              [pageSizeOptions]=\"pageSizeOptions\"\r\n              [attr.aria-label]=\"ariaLabel\"\r\n              showFirstLastButtons >\r\n</mat-paginator>  -->" }]
        }], ctorParameters: function () { return []; }, propDecorators: { xyTableData: [{
                type: Input
            }], columnDefs: [{
                type: Input
            }], expandcolumnDefs: [{
                type: Input
            }], deleteRow: [{
                type: Output
            }], sort: [{
                type: ViewChild,
                args: [MatSort, { static: true }]
            }], paginator: [{
                type: ViewChild,
                args: [MatPaginator, { static: true }]
            }], table: [{
                type: ViewChild,
                args: [MatTable]
            }], expandDetail: [{
                type: Output
            }], expandRequired: [{
                type: Input
            }], expandTableDetail: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], pageSizeOptions: [{
                type: Input
            }], length: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], DisplayPaginatorLabel: [{
                type: Input
            }], expandAsData: [{
                type: Input
            }], expandAsTableData: [{
                type: Input
            }], isEditRequired: [{
                type: Input
            }], isDeleteRequired: [{
                type: Input
            }], editRow: [{
                type: Output
            }], refreshTrig: [{
                type: Output
            }], action: [{
                type: Output
            }], matButton: [{
                type: ViewChild,
                args: ['button']
            }], tableactionBar: [{
                type: Input
            }], tableSearchBar: [{
                type: Input
            }], deleteAllTrig: [{
                type: Input
            }], columnHideTrig: [{
                type: Input
            }], searchPlaceholder: [{
                type: Input
            }], tableRefresh: [{
                type: Input
            }], noDataMessage: [{
                type: Input
            }], customfilter: [{
                type: Input
            }], CustomELement: [{
                type: Input
            }], buttonText: [{
                type: Input
            }], buttonAction: [{
                type: Output
            }], searchMenu: [{
                type: ViewChild,
                args: ['searchMenu']
            }], onHostClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
function feed(from, to) {
    return from.subscribe(data => to.next(data), err => to.error(err), () => to.complete());
}
//# sourceMappingURL=data:application/json;base64,
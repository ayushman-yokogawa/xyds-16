import { AfterViewInit, ElementRef, EventEmitter, QueryList } from "@angular/core";
import { XyOptionComponent } from "./xy-option.component";
import { MatSelect } from "@angular/material/select";
import { XyHintComponent } from "../xy-hint/xy-hint.component";
import { XyErrorComponent } from "../xy-error/xy-error.component";
import { ControlValueAccessor, FormBuilder, FormControl, FormGroup } from "@angular/forms";
import { HttpClient } from "@angular/common/http";
import * as i0 from "@angular/core";
export interface XyOptionItem {
    icon?: string;
    value?: string;
    disabled: boolean;
    content?: string;
    id: string;
    displayName: string;
}
export declare class XySelectComponent implements AfterViewInit, ControlValueAccessor {
    private http;
    fb: FormBuilder;
    name: string;
    label: string;
    id: string;
    placeholder: string;
    selectedValueChange: EventEmitter<string>;
    input: any;
    multiple: boolean;
    selectFormControl: FormControl;
    errorMessage: string;
    errorOccurred: boolean;
    hasError(): boolean;
    getErrorMessage(): string;
    private _value;
    private _onChange;
    private _onTouched;
    ngOnInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    _multipleSelect: boolean;
    _small: boolean;
    set multipleSelect(s: boolean | string);
    set small(s: boolean | string);
    get small(): boolean;
    get multipleSelect(): boolean;
    _required: boolean;
    set required(s: string | boolean);
    get required(): boolean;
    _disabled: boolean;
    set disabled(s: boolean | string);
    get disabled(): boolean;
    private _shadow;
    set shadow(s: boolean | string);
    get shadow(): boolean;
    formGroup: FormGroup;
    error: string;
    select: MatSelect;
    selectElement: ElementRef;
    options: QueryList<XyOptionComponent>;
    hint: XyHintComponent;
    errors: QueryList<XyErrorComponent>;
    onchange: EventEmitter<any>;
    private _onTouchedCallback;
    private _onChangeCallback;
    dataSourceData: XyOptionItem[];
    set dataSource(list: XyOptionItem[]);
    formControl: FormControl;
    form: FormControl;
    selectedValueString: string;
    selectedValue: any;
    constructor(http: HttpClient, fb: FormBuilder);
    ngAfterViewInit(): void;
    set value(v: string);
    get value(): string;
    applyValue(): void;
    onChange(v: string): void;
    compare(a: XyOptionItem, b: XyOptionItem): boolean;
    changed: (value: string) => void;
    onChanged(event: Event): void;
    styleClass(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<XySelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<XySelectComponent, "xy-select", never, { "name": { "alias": "name"; "required": false; }; "label": { "alias": "label"; "required": false; }; "id": { "alias": "id"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "errorMessage": { "alias": "errorMessage"; "required": false; }; "multipleSelect": { "alias": "multipleSelect"; "required": false; }; "small": { "alias": "small"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "shadow": { "alias": "shadow"; "required": false; }; "formGroup": { "alias": "formGroup"; "required": false; }; "error": { "alias": "error"; "required": false; }; "dataSource": { "alias": "dataSource"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, { "selectedValueChange": "selectedValueChange"; "onchange": "change"; }, ["hint", "options", "errors"], ["xy-hint"], false, never>;
}

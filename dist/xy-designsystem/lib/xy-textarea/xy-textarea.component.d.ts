import { ElementRef, QueryList, Version } from "@angular/core";
import { ErrorStateMatcher } from "@angular/material/core";
import { MatLegacyInput as MatInput } from "@angular/material/legacy-input";
import { ControlValueAccessor, FormControl, FormGroup } from "@angular/forms";
import { MatLegacyLabel as MatLabel } from "@angular/material/legacy-form-field";
import { XyHintComponent } from "../xy-hint/xy-hint.component";
import { XyErrorComponent } from "../xy-error/xy-error.component";
import * as i0 from "@angular/core";
export declare class XyTextareaComponent implements ControlValueAccessor {
    name: string;
    label: string;
    private _value;
    placeholder: string;
    note: string;
    rows?: string;
    maxlength?: string;
    formGroup: FormGroup;
    formControl: FormControl;
    textareaControl: FormControl;
    errorStateMatcher: ErrorStateMatcher;
    list?: string;
    _readonly: boolean;
    set readonly(s: string | boolean);
    get readonly(): boolean;
    _required: boolean;
    set required(s: string | boolean);
    get required(): boolean;
    _disabled: boolean;
    set disabled(s: string | boolean);
    get disabled(): boolean;
    _hasError: boolean;
    set hasError(s: string | boolean);
    get hasError(): boolean;
    _isLoading: boolean;
    set isLoading(s: string | boolean);
    get isLoading(): boolean;
    _edited: boolean;
    set edited(s: string | boolean);
    get edited(): boolean;
    _success: boolean;
    set success(s: string | boolean);
    get success(): boolean;
    get spinnerDiameter(): number;
    changed: (value: string) => void;
    touched: (value: string) => void;
    onChanged(event: Event): void;
    matLabel: MatLabel;
    input: MatInput;
    textarea: ElementRef;
    hint: XyHintComponent;
    errors: QueryList<XyErrorComponent>;
    private _onTouchedCallback;
    private _onChangeCallback;
    angularVersion: Version;
    constructor();
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    ngAfterViewInit(): void;
    set value(v: string);
    styleClass(): string;
    labelClass(): string;
    focus(options?: FocusOptions): void;
    blur(): void;
    updateErrorState(): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    onChange($event: Event): void;
    onFocus($event: FocusEvent): void;
    onBlur($event: FocusEvent): void;
    checkError(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<XyTextareaComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<XyTextareaComponent, "xy-textarea", never, { "name": { "alias": "name"; "required": false; }; "label": { "alias": "label"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "note": { "alias": "note"; "required": false; }; "rows": { "alias": "rows"; "required": false; }; "maxlength": { "alias": "maxlength"; "required": false; }; "formGroup": { "alias": "formGroup"; "required": false; }; "formControl": { "alias": "formControl"; "required": false; }; "textareaControl": { "alias": "textareaControl"; "required": false; }; "errorStateMatcher": { "alias": "errorStateMatcher"; "required": false; }; "list": { "alias": "list"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "hasError": { "alias": "has-error"; "required": false; }; "isLoading": { "alias": "is-loading"; "required": false; }; "edited": { "alias": "edited"; "required": false; }; "success": { "alias": "success"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, {}, ["hint", "errors"], ["[matPrefix]", "xy-hint", "[matSuffix]"], false, never>;
}

import { AfterViewInit, ElementRef, OnInit, Renderer2 } from "@angular/core";
import { FocusOrigin } from "@angular/cdk/a11y";
import { MatLegacyButton as MatButton } from "@angular/material/legacy-button";
import * as i0 from "@angular/core";
export declare class XyButtonComponent implements OnInit, AfterViewInit {
    private renderer;
    private elementRef;
    BUTTON_TYPE_TEXT_BUTTON: string;
    BUTTON_TYPE_LIGHT_WEIGHT_BUTTON: string;
    BUTTON_TYPE_PROMINENT_BUTTON: string;
    BUTTON_TYPE_STANDARD_BUTTON: string;
    BUTTON_TYPE_ICON_BUTTON: string;
    BUTTON_TYPE_FAB_BUTTON: string;
    BUTTON_TYPE_MINI_FAB_BUTTON: string;
    type: string;
    id: string;
    name: string;
    buttonType: "text-button" | "light-weight-button" | "standard-button" | "icon-button";
    color: "accent" | "critical" | "error" | "warning" | "attention" | "safe_normal";
    _disableRipple: boolean;
    set disableRipple(s: string | boolean);
    _disabled: boolean;
    set disabled(s: string | boolean);
    get disabled(): boolean;
    ariaLabel: string;
    defaultFocus: boolean;
    tabindex?: number;
    set textButton(s: any);
    set lightWeightButton(s: any);
    set standardButton(s: any);
    set iconButton(s: any);
    set cdkFocusInitial(v: any);
    icon: string;
    hasIcon: boolean;
    matButton: MatButton;
    content: any;
    constructor(renderer: Renderer2, elementRef: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    focus(origin?: FocusOrigin, options?: FocusOptions): void;
    blur(): void;
    click(): void;
    onClick($event: MouseEvent): void;
    onFocus($event: FocusEvent): void;
    onBlur($event: FocusEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<XyButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<XyButtonComponent, "xy-button", never, { "type": { "alias": "type"; "required": false; }; "id": { "alias": "id"; "required": false; }; "name": { "alias": "name"; "required": false; }; "buttonType": { "alias": "button-type"; "required": false; }; "color": { "alias": "color"; "required": false; }; "disableRipple": { "alias": "disableRipple"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "ariaLabel": { "alias": "aria-label"; "required": false; }; "defaultFocus": { "alias": "default-focus"; "required": false; }; "tabindex": { "alias": "tabindex"; "required": false; }; "textButton": { "alias": "text-button"; "required": false; }; "lightWeightButton": { "alias": "light-weight-button"; "required": false; }; "standardButton": { "alias": "standard-button"; "required": false; }; "iconButton": { "alias": "icon-button"; "required": false; }; "cdkFocusInitial": { "alias": "cdkFocusInitial"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; }, {}, never, ["mat-icon,xy-icon,img,svg", ":not(mat-icon)"], false, never>;
}

import { AfterViewInit, ElementRef, EventEmitter, QueryList } from "@angular/core";
import { MatLegacyCheckbox as MatCheckbox, MatLegacyCheckboxChange as MatCheckboxChange } from "@angular/material/legacy-checkbox";
import { ControlValueAccessor, FormBuilder, FormControl, FormGroup } from "@angular/forms";
import { XyErrorComponent } from "../xy-error/xy-error.component";
import * as i0 from "@angular/core";
export declare class XyCheckboxComponent implements AfterViewInit, ControlValueAccessor {
    fb: FormBuilder;
    id: string;
    checked: boolean;
    color: any | "accent" | "critical" | "error" | "warning" | "attention" | "safe_normal";
    value: any;
    name: string;
    label: string;
    checkedFormControl: FormControl;
    checkedChange: EventEmitter<boolean>;
    toggleChecked(): void;
    _disabled: boolean;
    set disabled(s: string | boolean);
    get disabled(): boolean;
    _required: boolean;
    set required(s: string | boolean);
    get required(): boolean;
    _disableRipple: boolean;
    set disableRipple(s: string | boolean);
    ariaDescribedby: string;
    ariaLabel: string;
    ariaLabelledby: string;
    tabindex?: number;
    formGroup: FormGroup;
    formControl: FormControl;
    onchange: EventEmitter<MatCheckboxChange>;
    onclick: EventEmitter<MouseEvent>;
    checkbox: MatCheckbox;
    checkboxInput: ElementRef;
    errors: QueryList<XyErrorComponent>;
    private _onTouchedCallback;
    private _onChangeCallback;
    changed: (value: string) => void;
    touched: (value: string) => void;
    isDisabled: Boolean;
    constructor(fb: FormBuilder);
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onChanged(event: Event): void;
    ngAfterViewInit(): void;
    setDisabledState(isDisabled: boolean): void;
    onChange($event: MatCheckboxChange): void;
    onClick(event: MouseEvent): void;
    onFocus(event: FocusEvent): void;
    onBlur(event: FocusEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<XyCheckboxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<XyCheckboxComponent, "xy-checkbox", never, { "id": { "alias": "id"; "required": false; }; "checked": { "alias": "checked"; "required": false; }; "color": { "alias": "color"; "required": false; }; "value": { "alias": "value"; "required": false; }; "name": { "alias": "name"; "required": false; }; "label": { "alias": "label"; "required": false; }; "checkedFormControl": { "alias": "checkedFormControl"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disableRipple": { "alias": "disableRipple"; "required": false; }; "ariaDescribedby": { "alias": "aria-describedby"; "required": false; }; "ariaLabel": { "alias": "aria-label"; "required": false; }; "ariaLabelledby": { "alias": "aria-labelledby"; "required": false; }; "tabindex": { "alias": "tabindex"; "required": false; }; "formGroup": { "alias": "formGroup"; "required": false; }; "formControl": { "alias": "formControl"; "required": false; }; }, { "checkedChange": "checkedChange"; "onchange": "change"; "onclick": "click"; }, ["errors"], ["*"], false, never>;
}

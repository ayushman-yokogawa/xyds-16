import { EventEmitter, QueryList } from "@angular/core";
import { ControlValueAccessor, FormControl } from "@angular/forms";
import { Observable } from "rxjs";
import { XyErrorComponent } from "../xy-error/xy-error.component";
import { XyHintComponent } from "../xy-hint/xy-hint.component";
import * as i0 from "@angular/core";
export declare class XyAutocompleteComponent implements ControlValueAccessor {
    options: string[];
    placeholder: string;
    errorMessage: string;
    inputAutocomplete: boolean;
    disabled: boolean;
    searchAutocomplete: boolean;
    selected: EventEmitter<string>;
    private isDisabled;
    autoCompleteControl: FormControl<string | null>;
    filteredOptions: Observable<string[]>;
    onChange: (value: any) => void;
    private onTouched;
    searched: boolean;
    search: EventEmitter<{
        value: string;
    }>;
    reset: EventEmitter<any>;
    hint: XyHintComponent;
    value: string;
    input: any;
    constructor();
    ngOnInit(): void;
    filterOptions(value: any): string[];
    optionSelected(option: string): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    hasError(): boolean;
    getErrorMessage(): string;
    onClickSearch($event: MouseEvent): void;
    onClickClear($event: MouseEvent): void;
    _incrementalSearch: boolean;
    set incrementalSearch(v: boolean | string);
    get incrementalSearch(): boolean;
    changed: (value: string) => void;
    errors: QueryList<XyErrorComponent>;
    _onTouchedCallback: () => void;
    _onChangeCallback: (_: any) => void;
    onKeyUp(event: any): void;
    doReset(): void;
    doSearch(): void;
    styleClass(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<XyAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<XyAutocompleteComponent, "xy-autocomplete", never, { "options": { "alias": "options"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "errorMessage": { "alias": "errorMessage"; "required": false; }; "inputAutocomplete": { "alias": "inputAutocomplete"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "searchAutocomplete": { "alias": "searchAutocomplete"; "required": false; }; "incrementalSearch": { "alias": "incremental-search"; "required": false; }; }, { "selected": "selected"; "search": "search"; "reset": "reset"; }, ["hint", "errors"], ["xy-hint"], false, never>;
}

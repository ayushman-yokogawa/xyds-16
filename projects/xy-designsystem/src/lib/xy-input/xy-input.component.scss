@use 'sass:map';
@use '@angular/material' as mat;
@use '../../../theme/xy-theme' as theme;

:host {
  position: relative;

  ::ng-deep {
    .mat-mdc-text-field-wrapper {
      padding-top: 0; //1.34375em;
    }

    .mat-form-field {
      font-family: theme.$base-font;
      min-width: 328px;

      .mat-form-field-label-wrapper {
        padding-top: 0;
        
        label {
          padding: 4px 16px;
          width: calc(100% - 32px);

          &.mat-form-field-label {
            top: calc(50% - 1.1rem);
          }
        }
      }

      &.xy-input-small {
        .mat-form-field-flex{
          border-top: none;
        }
      }
    }

    .mat-form-field-subscript-wrapper{
      margin-top: 4px;
      position: inherit;
      font-size: 75%;
    }

    .mat-form-field-hint-wrapper {
      margin-left: 18px;
      margin-right: 18px;
    }

    .mat-form-field:not(.mat-form-field-invalid):not(.xy-input-error):not(.mat-focused):not(.xy-input-readonly):not(.xy-input-edited) {
      .mat-form-field-label-wrapper {
        label {
          color: mat.get-color-from-palette(theme.$xy-base, 700);
        }
      }
    }

    .mat-form-field.mat-focused:not(.mat-form-field-invalid):not(.xy-input-error):not(.xy-input-readonly):not(.xy-input-success):not(.xy-input-edited) {
      .mat-form-field-label-wrapper {
        label {
          color: mat.get-color-from-palette(theme.$xy-primary, 500);
        }
      }
    }

    .mat-form-field.mat-form-field-invalid {
      .mat-form-field-label-wrapper {
        label {
          color: mat.get-color-from-palette(theme.$xy-error, A700);
        }
      }
    }

    .mat-form-field.xy-input-error {
      .mat-form-field-label-wrapper {
        label {
          color: mat.get-color-from-palette(theme.$xy-error, A700);
        }
      }
    }

    .mat-form-field.xy-input-success {
      .mat-form-field-label-wrapper {
        label {
          color: mat.get-color-from-palette(theme.$xy-safe_normal, A700);
        }
      }
    }

    .mat-form-field.xy-input-edited {
      .mat-form-field-label-wrapper {
        label {
          color: mat.get-color-from-palette(theme.$xy-base, 700);
        }
      }
    }

    .mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label, .mat-form-field-can-float .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {
      transform: translateY(-10px) scale(0.75);
    }

    .mat-form-field-flex{
      padding: 0;
    }

    .mat-mdc-input-element {
      height: 2.25rem;
    }
  }

  ::ng-deep .mat-form-field:not(.mat-form-field-disabled) {

    &.mat-form-field-appearance-standard .mat-form-field-underline {
      background-color: mat.get-color-from-palette(theme.$xy-primary, 700) !important;
    }

    .mat-form-field-flex {
      background-color: theme.$xy-white;
      border-top-left-radius: 4px;
      border-top-right-radius: 4px;
    }

    .mat-hint {
      color: mat.get-color-from-palette(theme.$xy-base, 700) !important;
    }

    &.xy-input-readonly {
      .mat-form-field-label-wrapper {
        label {
          color: mat.get-color-from-palette(theme.$xy-base, 700);
        }
      }

      &.mat-focused, &:hover {
        .mat-form-field-ripple {
          background-color: mat.get-color-from-palette(theme.$xy-base, 400);
        }
      }

      .mat-form-field-flex {
        background-color: mat.get-color-from-palette(theme.$xy-disabled, 400, 0.05);
      }

      .mat-form-field-underline {
        background: mat.get-color-from-palette(theme.$xy-base, 400) !important;

        .mat-form-field-ripple {
          height: 1px !important;
        }
      }
    }

    &:not(.mat-form-field-invalid):not(.xy-input-error):not(.xy-input-readonly):not(.xy-input-success):not(.mat-focused):not(.xy-input-edited):hover {
      .mat-form-field-ripple {
        background-color: mat.get-color-from-palette(theme.$xy-primary, 700) !important;
      }
    }

    &:not(.mat-form-field-invalid):not(.xy-input-error):not(.xy-input-readonly):not(.xy-input-success):not(.xy-input-edited).mat-focused {
      .mat-form-field-ripple {
        background-color: mat.get-color-from-palette(theme.$xy-primary, 500) !important;
      }
      
    }

    &.mat-form-field-invalid {
      .mat-form-field-ripple {
        background-color: mat.get-color-from-palette(theme.$xy-error, A400) !important;
      }
    }

    &.xy-input-error {
      .mat-form-field-ripple {
        background-color: mat.get-color-from-palette(theme.$xy-error, A400) !important;
      }

      .mat-form-field-underline {
        background-color: mat.get-color-from-palette(theme.$xy-error, A400) !important;
      }

      .mat-hint {
        color: mat.get-color-from-palette(theme.$xy-error, A700) !important;
      }
    }

    &.xy-input-loading {
      .mat-form-field-ripple {
        background-color: mat.get-color-from-palette(theme.$xy-primary, 500) !important;
      }

      .mat-form-field-underline {
        background-color: mat.get-color-from-palette(theme.$xy-primary, 500) !important;
      }
    }

    &.xy-input-success {
      .mat-form-field-ripple {
        background-color: mat.get-color-from-palette(theme.$xy-safe_normal, A400) !important;
      }

      .mat-form-field-underline {
        background-color: mat.get-color-from-palette(theme.$xy-safe_normal, A400) !important;
      }

      .mat-hint {
        color: mat.get-color-from-palette(theme.$xy-safe_normal, A700) !important;
      }
    }

    &.xy-input-edited {
      .mat-form-field-ripple {
        background-color: mat.get-color-from-palette(theme.$xy-attention, A400) !important;
      }

      .mat-form-field-underline {
        background-color: mat.get-color-from-palette(theme.$xy-attention, A400) !important;
      }
    }
  }

  ::ng-deep .mat-form-field.mat-form-field-disabled {
    .mat-form-field-flex {
      background-color: transparent;
    }

    .mat-hint {
      color: mat.get-color-from-palette(theme.$xy-base, 400) !important;
    }

    .mat-form-field-label-wrapper {
      label {
        color: mat.get-color-from-palette(theme.$xy-base, 400) !important;
      }
    }

    &.mat-form-field-appearance-standard .mat-form-field-underline {
      background: mat.get-color-from-palette(theme.$xy-base, 400) !important;

      .mat-form-field-ripple {
        height: 1px !important;
        background-color: transparent !important;
      }
    }
  }

  ::ng-deep .mat-form-field.mat-form-field-required {
    .mat-form-field-label-wrapper {
      mat-label.angular12 {
        &::after {
          font-size: 0.75rem;
          content: 'ï¼Š';
          vertical-align: super;
        }
      }
    }
  }

  ::ng-deep .mat-form-field.mat-focused .mat-form-field-label .mat-form-field-required-marker {
    &:not(.xy-input-readonly) {
      color: mat.get-color-from-palette(theme.$xy-primary, 500) !important;
    }
  }

  ::ng-deep .mat-form-field.mat-form-field-invalid .mat-form-field-label .mat-form-field-required-marker {
    color: mat.get-color-from-palette(theme.$xy-error, A700) !important;
  }

  .mat-error {
    color: mat.get-color-from-palette(theme.$xy-error, A700) !important;
  }

  .xy-input-error, .xy-input-edited, .xy-input-success, .xy-input-loading {
    input[type="number"] {
      width: calc(100% - (12px + 1.5rem + 24px));
    }
  }

  input {
    color: mat.get-color-from-palette(theme.$xy-base, 900) !important;

    &[type="number"] {
      padding: 4px 0px 4px 12px;
      width: calc(100% - 12px);
      text-align: right;
      &::-webkit-outer-spin-button,
      &::-webkit-inner-spin-button {
        margin-left: 10px !important;
        margin-right: 0px !important;
      }
    }

    &:not([type="number"]) {
      padding: 4px 12px;
      width: calc(100% - 25px);
    }

    &[type="date"], &[type="time"] {
      &::-webkit-inner-spin-button {
        -webkit-appearance: none;
      }

      &::-webkit-clear-button {
        -webkit-appearance: none;
      }

      &::-webkit-calendar-picker-indicator {
        position: absolute;
        top: 2px;
        right: 12px;
        display: flex;
        width: 1.5rem;
        height: 1.5rem;
        justify-content: center;
        align-items: center;
        color: transparent;
        background: transparent;
        z-index: 100;
      }
    }

    &::placeholder {
      color: mat.get-color-from-palette(theme.$xy-base, 700) !important;
    }
  }

  ::ng-deep .mat-form-field.mat-form-field-disabled {
    input {
      color: mat.get-color-from-palette(theme.$xy-base, 500) !important;

      &::placeholder {
        color: mat.get-color-from-palette(theme.$xy-base, 500) !important;
      }
    }
  }

  .xy-input-icon {
    position: absolute;
    top: 2px;
    right: 12px;
    display: flex;
    width: 1.5rem;
    height: 1.5rem;
    border-radius: 50%;
    justify-content: center;
    align-items: center;

    mat-icon {
      width: 1.375rem;
      height: 1.375rem;
      font-size: 1.375rem;
      font-weight: 400;
      line-height: 1;
    }
  }

  .xy-input-error, .xy-input-edited, .xy-input-success, .xy-input-loading {
    .xy-input-email-icon, .xy-input-date-icon, .xy-input-time-icon {
      right: calc(12px + 1.5rem + 12px);
    }

    input {
      &[type="date"], &[type="time"] {
        &::-webkit-calendar-picker-indicator {
          right: calc(12px + 1.5rem + 12px);
        }
      }
    }
  }

  .xy-input-error-icon {
    background: mat.get-color-from-palette(theme.$xy-error, A400);

    mat-icon {
      color: theme.$xy-white;
      font-weight: 900;
    }
  }

  .xy-input-edited-icon {
    mat-icon {
      color: mat.get-color-from-palette(theme.$xy-attention, A400);
    }
  }

  .xy-input-success-icon {
    background: mat.get-color-from-palette(theme.$xy-safe_normal, A400);

    mat-icon {
      color: theme.$xy-white;
      font-weight: 900;
    }
  }

  .xy-input-loading-icon {
    position: absolute;
    top: 2px;
    right: 12px;
  }

  .xy-input-email-icon, .xy-input-date-icon, .xy-input-time-icon {
    mat-icon {
      color: mat.get-color-from-palette(theme.$xy-base, 800);
    }
  }

  .xy-input-small {
    input {
      padding: 1px 16px;
    }

    .xy-input-icon {
      top: 10px;
      right: 8px;
      width: 1.0rem;
      height: 1.0rem;

      mat-icon {
        width: 0.8125rem;
        height: 0.8125rem;
        font-size: 0.8125rem;
      }
    }

    .xy-input-loading-icon {
      top: 10px;
      right: 8px;
    }
  }

  .xy-input-small {
    &.xy-input-error, &.xy-input-edited, &.xy-input-success, &.xy-input-loading {
      .xy-input-email-icon, .xy-input-date-icon, .xy-input-time-icon {
        right: calc(8px + 1.0rem + 8px);
      }
    }
  }

  ::ng-deep .mat-form-field.mat-form-field-disabled {
    .xy-input-error-icon, .xy-input-success-icon {
      background: mat.get-color-from-palette(theme.$xy-base, 400);
    }

    .xy-input-edited-icon, .xy-input-loading-icon, .xy-input-email-icon, .xy-input-date-icon, .xy-input-time-icon {
      mat-icon {
        color: mat.get-color-from-palette(theme.$xy-base, 400);
      }
    }
  }
}

:host-context(.dark-theme) {
  :host {
    ::ng-deep {
      .mat-form-field:not(.mat-form-field-invalid):not(.xy-input-error):not(.mat-focused):not(.xy-input-readonly) {
        .mat-form-field-label-wrapper {
          label {
            color: mat.get-color-from-palette(theme.$xy-dark-base, 50);
          }
        }
      }

      .mat-form-field.mat-focused:not(.mat-form-field-invalid):not(.xy-input-error):not(.xy-input-readonly):not(.xy-input-success) {
        .mat-form-field-label-wrapper {
          label {
            color: mat.get-color-from-palette(theme.$xy-dark-primary, 200);
          }
        }
      }

      .mat-form-field.mat-form-field-invalid {
        .mat-form-field-label-wrapper {
          label {
            color: mat.get-color-from-palette(theme.$xy-error, A200);
          }
        }
      }

      .mat-form-field.xy-input-error {
        .mat-form-field-label-wrapper {
          label {
            color: mat.get-color-from-palette(theme.$xy-error, A200);
          }
        }
      }

      .mat-form-field.xy-input-success {
        .mat-form-field-label-wrapper {
          label {
            color: mat.get-color-from-palette(theme.$xy-safe_normal, A200);
          }
        }
      }
    }
   
  
   
    ::ng-deep .mat-form-field:not(.mat-form-field-disabled) {
      &.mat-form-field-appearance-standard .mat-form-field-underline {
        background-color: mat.get-color-from-palette(theme.$xy-dark-primary, 500) !important;
        
      }

      .mat-form-field-flex {
        background-color: theme.$xy-black;
      }

      .mat-hint {
        color: mat.get-color-from-palette(theme.$xy-dark-base, 200) !important;
      }

      &.xy-input-readonly {
        .mat-form-field-label-wrapper {
          label {
            color: mat.get-color-from-palette(theme.$xy-dark-base, 200);
          }
        }

        &.mat-focused, &:hover {
          .mat-form-field-ripple {
            background-color: mat.get-color-from-palette(theme.$xy-dark-base, 500);
          }
        }

        .mat-form-field-flex {
         background-color:transparent;
        }

        .mat-form-field-underline {
          background: mat.get-color-from-palette(theme.$xy-dark-base, 200) !important;
        }
      }

      &:not(.mat-form-field-invalid):not(.xy-input-error):not(.xy-input-readonly):not(.xy-input-success):not(.mat-focused):not(.xy-input-edited):hover {
        .mat-form-field-ripple {
          background-color: mat.get-color-from-palette(theme.$xy-dark-primary, 500) !important;
        }
      }

      &:not(.mat-form-field-invalid):not(.xy-input-error):not(.xy-input-readonly):not(.xy-input-success):not(.xy-input-edited).mat-focused {
        .mat-form-field-ripple {
          background-color: mat.get-color-from-palette(theme.$xy-dark-primary, 200) !important;
        }
      }

      &.mat-form-field-invalid {
        .mat-form-field-ripple {
          background-color: mat.get-color-from-palette(theme.$xy-error, A400) !important;
        }
      }

      &.xy-input-error {
        .mat-form-field-ripple {
          background-color: mat.get-color-from-palette(theme.$xy-error, A400) !important;
        }

        .mat-form-field-underline {
          background-color: mat.get-color-from-palette(theme.$xy-error, A400) !important;
        }

        .mat-hint {
          color: mat.get-color-from-palette(theme.$xy-error, A200) !important;
        }
      }

      &.xy-input-loading {
        .mat-form-field-ripple {
          background-color: mat.get-color-from-palette(theme.$xy-dark-primary, 200) !important;
        }

        .mat-form-field-underline {
          background-color: mat.get-color-from-palette(theme.$xy-dark-primary, 200) !important;
        }
      }

      &.xy-input-success {
        .mat-form-field-ripple {
          background-color: mat.get-color-from-palette(theme.$xy-safe_normal, A400) !important;
        }

        .mat-form-field-underline {
          background-color: mat.get-color-from-palette(theme.$xy-safe_normal, A400) !important;
        }

        .mat-hint {
          color: mat.get-color-from-palette(theme.$xy-safe_normal, A200) !important;
        }
      }

      &.xy-input-edited {
        .mat-form-field-ripple {
          background-color: mat.get-color-from-palette(theme.$xy-attention, A400) !important;
        }

        .mat-form-field-underline {
          background-color: mat.get-color-from-palette(theme.$xy-attention, A400) !important;
        }
      }
    }

    ::ng-deep .mat-form-field.mat-form-field-disabled {
      .mat-form-field-flex {
        background-color: transparent;
      }

      .mat-form-field {
        .mat-form-field-label-wrapper {
          label {
            color: mat.get-color-from-palette(theme.$xy-dark-base, 500) !important;
          }
        }
      }

      .mat-form-field-appearance-standard .mat-form-field-underline {
        background: mat.get-color-from-palette(theme.$xy-dark-base, 200) !important;

        .mat-form-field-ripple {
          background-color: transparent !important;
        }
      }
    }

    ::ng-deep .mat-form-field.mat-focused {
      .mat-form-field-label {
        color: mat.get-color-from-palette(theme.$xy-dark-primary, 200) !important;
      }
      .mat-form-field-ripple {
        background-color: mat.get-color-from-palette(theme.$xy-dark-primary, 500) !important;
      }
      .mat-form-field-required-marker {
        color: mat.get-color-from-palette(theme.$xy-dark-primary, 500) !important;
      }
    }

    ::ng-deep .mat-form-field.mat-focused .mat-form-field-label .mat-form-field-required-marker {
      &:not(.xy-input-readonly) {
        color: mat.get-color-from-palette(theme.$xy-dark-primary, 500) !important;
      }
    }

    ::ng-deep .mat-form-field.mat-form-field-invalid .mat-form-field-label .mat-form-field-required-marker {
      color: mat.get-color-from-palette(theme.$xy-error, A200) !important;
    }

    .mat-error {
      color: mat.get-color-from-palette(theme.$xy-error, A200) !important;
    }

    input {
      color: mat.get-color-from-palette(theme.$xy-dark-base, 50) !important;

      &::placeholder {
        color: mat.get-color-from-palette(theme.$xy-dark-base, 200) !important;
      }
    }

    ::ng-deep .mat-form-field.mat-form-field-disabled {
      
      .mat-form-field-flex {
        background-color: transparent !important;
      }

      input {
        color: mat.get-color-from-palette(theme.$xy-dark-base, 500) !important;

        &::placeholder {
          color: mat.get-color-from-palette(theme.$xy-dark-base, 500) !important;
        }
      }
    }

    .xy-input-error-icon {
      background: mat.get-color-from-palette(theme.$xy-error, A400);
      mat-icon {
        color: theme.$xy-white;
      }
    }

    .xy-input-loading-icon {
      mat-icon {
        color: mat.get-color-from-palette(theme.$xy-dark-primary, 500);
      }
    }

    .xy-input-edited-icon {
      mat-icon {
        color: mat.get-color-from-palette(theme.$xy-attention, A400);
      }
    }

    .xy-input-success-icon {
      background: mat.get-color-from-palette(theme.$xy-safe_normal, A400);

      mat-icon {
        color: theme.$xy-white;
      }
    }

    .xy-input-email-icon, .xy-input-date-icon, .xy-input-time-icon {
      mat-icon {
        color: mat.get-color-from-palette(theme.$xy-dark-base, 50);
      }
    }
  }
}
